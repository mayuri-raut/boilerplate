/* stylelint-disable at-rule-no-unknown */
/* stylelint-disable no-invalid-double-slash-comments */
$breakpoints-up: (
    "md": 700px,
    "lg": 900px,
    "xlg": 1440px,
);

$breakpoints-down: (
    "sm": 699.98px,
    "md": 899.98px,
    "lg": 1439.98px,
);

// Breakpoint Upward
@mixin breakpoint($size) {
    @media (min-width: map-get($breakpoints-up, $size)) {
        @content;
    }
}

// Breakpoint Downward
@mixin breakpoint-down($size) {
    @media (max-width: map-get($breakpoints-down, $size)) {
        @content;
    }
}

@mixin margin-mix($margin) {
    margin: $margin;
 }

 @mixin overlay() {
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
  }

  @mixin border-radius($radius) {
    -webkit-border-radius: $radius;
       -moz-border-radius: $radius;
        -ms-border-radius: $radius;
            border-radius: $radius;
  }

  @mixin opacity($opacity) {
    opacity: $opacity;
   filter: alpha(opacity=($opacity * 100));
}

// Flexbox display
@mixin flexbox() {
    display: box;
    display: flexbox;
    display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
    flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
    flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
    flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
    -webkit-box-ordinal-group: $val;
    -moz-box-ordinal-group: $val;
    -ms-flex-order: $val;
    order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
    flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
    flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
    flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
    justify-content: $justify;
    -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
    align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
    align-items: $align;
    -ms-flex-align: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
    align-self: $align;
}

@function size($target, $context: 16px) {
    @return ($target / $context) * 1rem;
}

// Custom reusable mixins
@mixin block-center() {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin block-center-vertically() {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

@mixin block-center-horizontally() {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

@mixin block-size($item-width-base, $item-height-base) {
    width: $item-width-base;
    height: $item-height-base;
}

@mixin flex-center() {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

@mixin flex-item($flex, $align-items, $justify-content) {
    display: $flex;
    align-items: $align-items;
    justify-content: $justify-content;
}

@mixin flex-vertical-center() {
    display: flex;
    align-items: center;
}

@mixin flex-horizontal-center() {
    display: flex;
    justify-content: center;
}

// Transition animation rules
@mixin transition-35-inout() {
    transition: all 0.35s ease-in-out;
}



//Truncate 

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

//When using ::before and ::after you'll always need these

%clearfix {
    *zoom: 1;
    &:before, &:after {
      content: " ";
      display: table;
    }
    &:after {
      clear: both;
    }
  }